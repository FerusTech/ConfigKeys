plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

def sonatypeUsername = ""
def sonatypePassword = ""

if (System.getenv("SIGN_ID")) {
    sonatypeUsername = System.getenv("SON_USR")
    sonatypePassword = System.getenv("SON_PAS")

    project.setProperty("signing.keyId", System.getenv("SIGN_ID"))
    project.setProperty("signing.password", System.getenv("SIGN_PASS"))
}

ext {
    gitHash = getGitHash()
}

private static String getGitHash() {
    def process = 'git rev-parse --short HEAD'.execute()
    process.waitFor()
    return process.exitValue() ? 'unknown' : process.text.trim()
}

group 'tech.ferus.util'
version = '1.0.1'
archivesBaseName = "ConfigKeys"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "com.google.code.findbugs:jsr305:3.0.2"
    compile "ninja.leaping.configurate:configurate-core:3.2"
    compile "ninja.leaping.configurate:configurate-gson:3.2"
    compile "ninja.leaping.configurate:configurate-hocon:3.2"
    compile "ninja.leaping.configurate:configurate-json:3.2"
    compile "ninja.leaping.configurate:configurate-yaml:3.2"
}

compileJava {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Build-Version': gitHash
        )
    }
}

shadowJar {
    classifier = "shaded"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    failOnError = false
    source = sourceSets.main.allJava
    classpath = configurations.compile
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

signing {
    required { System.getenv("SIGN_ID") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password:sonatypePassword)
            }

            pom.project {
                name 'ConfigKeys'
                packaging 'jar'
                description 'ConfigKeys is a simple wrapper for zml\'s Configurate, providing a more stream-lined way to access configuration on-the-fly.'
                url 'https://ferustech.github.com'

                scm {
                    url 'scm:git@github.com:FerusTech/ConfigKeys.git'
                    connection 'scm:git@github.com:FerusTech/ConfigKeys.git'
                    developerConnection 'scm:git@github.com:FerusTech/ConfigKeys.git'
                }

                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'FerusGrim'
                        name 'Nicholas Badger'
                    }
                }
            }
        }
    }
}
