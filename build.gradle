plugins {
    id 'com.jfrog.bintray' version '1.7.2'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

def versionObj = new Version(major: 1, minor: 0, revision: "0")

group 'tech.ferus.util'
archivesBaseName = "ConfigKeys"
version = "$versionObj"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile "com.google.code.findbugs:jsr305:3.0.2"
    compile "ninja.leaping.configurate:configurate-core:3.2"
    compile "ninja.leaping.configurate:configurate-gson:3.2"
    compile "ninja.leaping.configurate:configurate-hocon:3.2"
    compile "ninja.leaping.configurate:configurate-json:3.2"
    compile "ninja.leaping.configurate:configurate-yaml:3.2"
}

compileJava {
    options.encoding = 'UTF-8'
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

shadowJar {
    classifier = "withDependencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    failOnError = false
    source = sourceSets.main.allJava
    classpath = configurations.compile
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

bintray {
    user = System.getenv("BINTRAY_USERNAME")
    key = System.getenv("BINTRAY_KEY")
    publications = ["BintrayRelease"]
    pkg {
        repo = 'maven'
        userOrg = 'ferustech'
        name = 'ConfigKeys'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/FerusTech/ConfigKeys.git'
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

bintrayUpload {
    dependsOn build

    onlyIf { System.getenv("BINTRAY_USERNAME") }
    onlyIf { System.getenv("BINTRAY_KEY") }
    onlyIf { System.getenv("TRAVIS_BUILD_NUMBER") }
}

class Version {
    String major, minor, revision

    static String getBuild() {
        System.getenv("TRAVIS_BUILD_NUMBER") ?: System.getProperty("TRAVIS_BUILD_NUMBER") ?: "DEV"
    }

    String toString() {
        "${major}.${minor}.${revision}_" + getBuild()
    }
}